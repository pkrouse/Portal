//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""MyActionMap"",
            ""id"": ""a87db996-ee9d-4df9-a0d1-ce3b358fd044"",
            ""actions"": [
                {
                    ""name"": ""PortalToggle"",
                    ""type"": ""Value"",
                    ""id"": ""45dda828-a5c9-4d10-828e-210c104c37dd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PortalFire"",
                    ""type"": ""Button"",
                    ""id"": ""fced2319-334e-44bb-b459-2914d1a75e83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boing"",
                    ""type"": ""Button"",
                    ""id"": ""134b369d-e7fa-4af7-8c64-a37ae6dbd34c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5d0f37e-e0a6-4911-98e5-2068a50f398a"",
                    ""path"": ""<XRController>{RightHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PortalToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c80c7c1-27ae-4a5a-aaf8-59c3371e9170"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PortalFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82464eb8-8ba2-4bb7-8c6e-a25503a8a1a4"",
                    ""path"": ""<XRController>{RightHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boing"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MyActionMap
        m_MyActionMap = asset.FindActionMap("MyActionMap", throwIfNotFound: true);
        m_MyActionMap_PortalToggle = m_MyActionMap.FindAction("PortalToggle", throwIfNotFound: true);
        m_MyActionMap_PortalFire = m_MyActionMap.FindAction("PortalFire", throwIfNotFound: true);
        m_MyActionMap_Boing = m_MyActionMap.FindAction("Boing", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MyActionMap
    private readonly InputActionMap m_MyActionMap;
    private List<IMyActionMapActions> m_MyActionMapActionsCallbackInterfaces = new List<IMyActionMapActions>();
    private readonly InputAction m_MyActionMap_PortalToggle;
    private readonly InputAction m_MyActionMap_PortalFire;
    private readonly InputAction m_MyActionMap_Boing;
    public struct MyActionMapActions
    {
        private @Inputs m_Wrapper;
        public MyActionMapActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @PortalToggle => m_Wrapper.m_MyActionMap_PortalToggle;
        public InputAction @PortalFire => m_Wrapper.m_MyActionMap_PortalFire;
        public InputAction @Boing => m_Wrapper.m_MyActionMap_Boing;
        public InputActionMap Get() { return m_Wrapper.m_MyActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MyActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IMyActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MyActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MyActionMapActionsCallbackInterfaces.Add(instance);
            @PortalToggle.started += instance.OnPortalToggle;
            @PortalToggle.performed += instance.OnPortalToggle;
            @PortalToggle.canceled += instance.OnPortalToggle;
            @PortalFire.started += instance.OnPortalFire;
            @PortalFire.performed += instance.OnPortalFire;
            @PortalFire.canceled += instance.OnPortalFire;
            @Boing.started += instance.OnBoing;
            @Boing.performed += instance.OnBoing;
            @Boing.canceled += instance.OnBoing;
        }

        private void UnregisterCallbacks(IMyActionMapActions instance)
        {
            @PortalToggle.started -= instance.OnPortalToggle;
            @PortalToggle.performed -= instance.OnPortalToggle;
            @PortalToggle.canceled -= instance.OnPortalToggle;
            @PortalFire.started -= instance.OnPortalFire;
            @PortalFire.performed -= instance.OnPortalFire;
            @PortalFire.canceled -= instance.OnPortalFire;
            @Boing.started -= instance.OnBoing;
            @Boing.performed -= instance.OnBoing;
            @Boing.canceled -= instance.OnBoing;
        }

        public void RemoveCallbacks(IMyActionMapActions instance)
        {
            if (m_Wrapper.m_MyActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMyActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MyActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MyActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MyActionMapActions @MyActionMap => new MyActionMapActions(this);
    public interface IMyActionMapActions
    {
        void OnPortalToggle(InputAction.CallbackContext context);
        void OnPortalFire(InputAction.CallbackContext context);
        void OnBoing(InputAction.CallbackContext context);
    }
}
